type Product {
    id: ID!
    name: String!
    image: String
    category_id: ID
    category: Category @belongsTo
    inventories: [Inventory] @hasMany
    order_items: [OrderItem] @hasMany
    description: String
    sku: String!
    price: Float
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

input ProductInput {
    id: ID
    name: String!
    image: String
    category: ConnectCategoryRelation
    inventories: ConnectInventoriesRelation
    order_items: OrderItemInput
    description: String
    sku: String!
    price: Float
}

input ConnectProductRelation {
    connect: ID
    upsert: ProductInput
    disconnect: Boolean
    delete: Boolean
}

input ConnectProductsRelation {
    connect: [ID]
    upsert: [ProductInput]
    delete: [ID]
}

extend type Query {
    products(
        search: String @scope(name: "search")
    ): [Product!]! @all
    productsPaginate: [Product!]! @paginate
    productsCount: Int! @count(model: "Product")
}

extend type Mutation {
    upsertProduct(input: ProductInput! @spread): Product @upsert #@can(ability: "upsert")
    deleteProduct(id: [ID!] @eq): [Product] @delete #@can(ability: "delete", find: "id")
    restoreProduct(id: [ID!] @eq): [Product] @restore #@can(ability: "restore", find: "id")
}