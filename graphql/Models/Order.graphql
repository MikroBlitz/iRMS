type Order {
    id: ID
    customer_id: ID
    cash_tendered: Float
    change: Float
    date: String
    payment: PaymentStatus
    status: OrderStatus
    total_amount: Float
    transaction_number: String
    customer: Customer @belongsTo
    customer_guest: String
    order_items: [OrderItem] @hasMany
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

input OrderInput {
    id: ID
    cash_tendered: String
    change: Float
    date: String
    payment: PaymentStatus
    status: OrderStatus
    total_amount: Float
    transaction_number: String
    customer: ConnectCustomerRelation
    customer_guest: String
    order_items: ConnectOrderItemsRelation
}

input ConnectOrderRelation {
    connect: ID
    upsert: OrderInput
    delete: ID
}

input ConnectOrdersRelation {
    connect: [ID]
    upsert: [OrderInput]
    delete: [ID]
}

enum OrderStatus {
    COMPLETED @enum(value: 0)
    ON_HOLD @enum(value: 1)
    CANCELLED @enum(value: 2)
}

enum PaymentStatus {
    CASH @enum(value: 0)
    GCASH @enum(value: 1)
    BANK @enum(value: 2)
}

extend type Query {
    orders(
        search: String @scope(name: "search")
    ): [Order!]! @all(model: "App\\Modules\\Order\\Models\\Order")
    ordersPaginate(
        search: String @scope(name: "search")
    ): [Order!]! @paginate(model: "App\\Modules\\Order\\Models\\Order")
    ordersCount: Int! @count(model: "App\\Modules\\Order\\Models\\Order")
}

extend type Mutation {
    upsertOrder(input: OrderInput! @spread): Order @upsert(model: "App\\Modules\\Order\\Models\\Order")
    deleteOrder(id: [ID!] @eq): [Order] @delete(model: "App\\Modules\\Order\\Models\\Order")
    restoreOrder(id: [ID!] @eq): [Order] @restore(model: "App\\Modules\\Order\\Models\\Order")
}
