type Customer {
    id: ID!
    user_id: ID
    user: User @belongsTo
    name: String # used for no account customers
    phone: String
    address: String
    points: String
    orders: [Order] @hasMany
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

input CustomerInput {
    id: ID
    user_id: ID
    user: UserInput
    name: String # used for no account customers
    phone: String
    address: String
    points: String
    orders: OrderInput
}

input ConnectCustomersRelation {
    connect: ID
    upsert: [CustomerInput!]
    delete: [ID]
}

extend type Query {
    customers(
        search: String @scope(name: "search")
    ): [Customer!]! @all #@can(ability: "read")
    customersPaginate(
        search: String @scope(name: "search")
    ): [Customer!]! @paginate #@can(ability: "read")
}

extend type Mutation {
    upsertCustomer(input: CustomerInput! @spread): Customer @upsert #@can(ability: "upsert")
    deleteCustomer(id: [ID!] @eq): [Customer] @delete #@can(ability: "delete", find: "id")
    restoreCustomer(id: [ID!] @eq): [Customer] @restore #@can(ability: "restore", find: "id")
}