type Customer {
    id: ID!
    user_id: ID
    user: User @belongsTo
    name: String # used for no account customers
    phone: String
    address: String
    points: String
    orders: [Order] @hasMany
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

input CustomerInput {
    id: ID
    user: ConnectUserRelation
    name: String # used for none account customers
    phone: String
    address: String
    points: String
    orders: ConnectOrdersRelation
}

input ConnectCustomerRelation {
    connect: ID
    upsert: CustomerInput
    delete: ID
}

input ConnectCustomersRelation {
    connect: [ID]
    upsert: [CustomerInput!]!
    delete: [ID]
}

extend type Query {
    customers(
        search: String @scope(name: "search")
    ): [Customer!]! @all(model: "App\\Modules\\Customer\\Models\\Customer")
    customersPaginate(
        search: String @scope(name: "search")
    ): [Customer!]! @paginate(model: "App\\Modules\\Customer\\Models\\Customer")
    customersCount: Int! @count(model: "App\\Modules\\Customer\\Models\\Customer")
}

extend type Mutation {
    upsertCustomer(input: CustomerInput! @spread): Customer @upsert(model: "App\\Modules\\Customer\\Models\\Customer")
    deleteCustomer(id: [ID!] @eq): [Customer] @delete(model: "App\\Modules\\Customer\\Models\\Customer")
    restoreCustomer(id: [ID!] @eq): [Customer] @restore(model: "App\\Modules\\Customer\\Models\\Customer")
}