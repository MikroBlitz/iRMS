type User {
    id: ID!
    first_name: String
    middle_name: String
    last_name: String
    name: String
    email: String
    password: String
    messages: [Message] @hasMany
    contacts: [Contact] @hasMany
    email_verified_at: DateTime
    role: Int # TODO: use enum
    customers: [Customer] @hasMany
    usersCount: Int
    logs: [Log] @hasMany
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

input UserInput {
    id: ID
    first_name: String
    middle_name: String
    last_name: String
    name: String
    email: String
    password: String
    role: Int # TODO: use enum
    customers: ConnectCustomersRelation
    logs: ConnectUsersRelation
}

input ConnectUserRelation {
    id: ID
    connect: ID
    upsert: UserInput
    delete: ID
}

input ConnectUsersRelation {
    id: [ID]
    connect: [ID]
    upsert: [UserInput]
    delete: [ID]
}

enum Role {
    USER @enum(value: 0)
    ADMIN @enum(value: 1)
    STAFF @enum(value: 2)
    STORE_MANAGER @enum(value: 3)
}

type Query {
    me: User @auth(guards: "api")
    user(id: ID! @eq): User @find(model: "App\\Modules\\User\\Models\\User")
    users(
        search: String @scope(name: "search")
        limit: Int @limit
    ): [User!]! @all(model: "App\\Modules\\User\\Models\\User")
    filterCustomer(
        limit: Int @limit
        filter: String @scope(name: "filterCustomer")
    ): [User!]! @all(model: "App\\Modules\\User\\Models\\User")
    usersPaginate: [User!]! @paginate(model: "App\\Modules\\User\\Models\\User")
    usersCount: Int! @count(model: "App\\Modules\\User\\Models\\User")
}

extend type Mutation {
#    upsertUser(input: UserInput! @spread): User @upsert(model: "App\\Modules\\User\\Models\\User")
    upsertUser(input: UserInput!): User @field(resolver: "UserResolver@upsertUser")
    deleteUser(id: [ID!] @eq): [User] @delete(model: "App\\Modules\\User\\Models\\User")
    restoreUser(id: [ID!] @eq): [User] @restore(model: "App\\Modules\\User\\Models\\User")
}
