type Message {
    id: ID!
    sender: User @belongsTo
    receiver: User @belongsTo
    sender_id: Int
    receiver_id: Int
    message: String!
    messagesCount: Int
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

input MessageInput {
    id: ID
    sender: ConnectUserRelation
    receiver: ConnectUserRelation
    message: String
}

input ConnectMessageRelation {
    id: ID
    connect: ID
    upsert: MessageInput
    delete: ID
}

input ConnectMessagesRelation {
    id: [ID]
    connect: [ID]
    upsert: [MessageInput]
    delete: [ID]
}

extend type Query {
    message(id: ID! @eq): Message @find
    messages(
        search: String @scope(name: "search")
        where: _ @whereConditions(columns: ["sender_id", "receiver_id"])
    ): [Message!]! @paginate
    messagesCount: Int! @count(model: "Message")
}

extend type Mutation {
    upsertMessage(input: MessageInput! @spread): Message @upsert
    deleteMessage(id: ID! @eq): Message @delete
    restoreMessage(id: ID! @eq): Message @restore
}
